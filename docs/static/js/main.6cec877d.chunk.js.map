{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGif","category","a","url","encodeURI","fetch","resp","json","data","gif","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAM,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAGZC,EAHY,iDAGqCC,UAAUH,GAH/C,+DAICI,MAAMF,GAJP,cAIZG,EAJY,gBAKGA,EAAKC,OALR,uBAKXC,EALW,EAKXA,KAEDC,EAAMD,EAAKE,KAAK,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXvB,kBAeXM,GAfW,4CAAH,sDCANO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBT,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MAEnC,OACI,sBAAKI,UAAU,+CAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCHJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAoBxC,OAdAC,qBAAW,WAEPxB,EAAQC,GACHwB,MAAM,SAAAd,GACCY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAI1B,CAAEpB,IAIEqB,EDhB0BI,CAAczB,GAAlCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAIrB,OACI,qCACI,oBAAIJ,UAAU,sCAAd,SAAsDhB,IACpDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEjB,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEmB3Be,EAjCM,WAAM,MAGaxC,mBAAS,CAAC,cAHvB,mBAGhByC,EAHgB,KAGJ1C,EAHI,KAYvB,OACI,qCAEI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ0C,EAAWlB,KAAK,SAAAT,GAChB,OAAO,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,YCxB1C4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6cec877d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value ); \r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ){\r\n            setCategories( cate => [ inputValue, ...cate ]);\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n","\r\n\r\n\r\nexport const getGif = async ( category ) => {\r\n\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=dzEI0WaYsz1aodVL7g7jD0Lc6embLazn`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gif = data.map( img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gif;\r\n\r\n}","\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ( {id, url, title} ) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__bounceInDown\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGif } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    // getGif();\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounceIn\">{ category }</h3> \r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n           \r\n        <div className=\"card-grid\" >\r\n            \r\n            {\r\n                images.map( img =>  (\r\n                    <GifGridItem key={img.id} {...img} />\r\n                ))\r\n            }\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGif } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGif( category )\r\n            .then( img => {\r\n                    setState({\r\n                        data: img,\r\n                        loading: false\r\n                    })\r\n            })\r\n\r\n    }, [ category ])\r\n\r\n    \r\n\r\n    return state;\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One punch', 'Drago ball'];\r\n    const [categories, setCategories] = useState(['One punch']);\r\n\r\n    // const handleAdd = () => {\r\n\r\n    //     // setCategories( [...categories, 'HunterXhunter'] );\r\n    //     setCategories( cate => [ ...cate, 'Hunter' ] );\r\n\r\n    // }\r\n\r\n    return (\r\n        <>\r\n\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr></hr>\r\n\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => {\r\n                    return <GifGrid key={ category } category={ category } />\r\n                    }) \r\n                }\r\n            </ol>\r\n        \r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default GifExpertApp;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}